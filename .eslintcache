[{"/home/rafa/codes/www/todo-list/src/App.js":"1","/home/rafa/codes/www/todo-list/src/reportWebVitals.js":"2","/home/rafa/codes/www/todo-list/src/components/TodoList.js":"3","/home/rafa/codes/www/todo-list/src/components/TodoScreen.js":"4","/home/rafa/codes/www/todo-list/src/index.js":"5"},{"size":265,"mtime":1611834209740,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1611831087177,"results":"8","hashOfConfig":"7"},{"size":3859,"mtime":1611833969042,"results":"9","hashOfConfig":"7"},{"size":1394,"mtime":1611834649653,"results":"10","hashOfConfig":"7"},{"size":500,"mtime":1611831087177,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lhxrwj",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rafa/codes/www/todo-list/src/App.js",[],"/home/rafa/codes/www/todo-list/src/reportWebVitals.js",[],"/home/rafa/codes/www/todo-list/src/components/TodoList.js",["23","24"],"import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  IconButton,\n  ListItemSecondaryAction\n} from \"@material-ui/core\";\nimport RootRef from \"@material-ui/core/RootRef\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { withStyles } from \"@material-ui/core/styles/index\";\n\n\n// fake data generator\nconst getItems = (count) =>\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\n    id: `item-${k}`,\n    primary: `item ${k}`,\n    secondary: k % 2 === 0 ? `Whatever for ${k}` : undefined\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // styles we need to apply on draggables\n  ...draggableStyle,\n\n  ...(isDragging && {\n    background: \"rgb(235,235,235)\"\n  })\n});\n\nconst getListStyle = (isDraggingOver) => ({\n  // background: isDraggingOver ? \"lightblue\" : \"lightgrey\"\n});\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(10)\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items\n    });\n  }\n\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided, snapshot) => (\n            <RootRef rootRef={provided.innerRef}>\n              <List style={getListStyle(snapshot.isDraggingOver)}>\n                {this.state.items.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <ListItem\n                        ContainerComponent=\"li\"\n                        ContainerProps={{ ref: provided.innerRef }}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        <ListItemIcon>\n                          <InboxIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                          primary={item.primary}\n                          secondary={item.secondary}\n                        />\n                        <ListItemSecondaryAction>\n                          <IconButton>\n                            <EditIcon />\n                          </IconButton>\n                        </ListItemSecondaryAction>\n                      </ListItem>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </List>\n            </RootRef>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nconst styles = {\n    checkbox: {\n        color: \"white\",\n        '&$checked': {\n            color: \"white\",\n        },\n    },\n    checked: {},\n    dragHandleIcon: {\n        color: 'white'\n    },\n    boxWhiteTitle: {\n        fontSize: 14,\n        fontWeight: 600,\n        textAlign: \"center\",\n        color: \"white\",\n        marginTop: 5,\n        marginBottom: 5,\n    }\n};\n\n// Put the thing into the DOM!\nexport default withStyles(styles)(TodoList);\n","/home/rafa/codes/www/todo-list/src/components/TodoScreen.js",["25","26","27","28","29","30","31","32","33","34","35","36","37","38"],"/home/rafa/codes/www/todo-list/src/index.js",[],{"ruleId":"39","severity":1,"message":"40","line":1,"column":17,"nodeType":"41","messageId":"42","endLine":1,"endColumn":26},{"ruleId":"39","severity":1,"message":"43","line":2,"column":8,"nodeType":"41","messageId":"42","endLine":2,"endColumn":16},{"ruleId":"39","severity":1,"message":"40","line":1,"column":17,"nodeType":"41","messageId":"42","endLine":1,"endColumn":26},{"ruleId":"39","severity":1,"message":"43","line":2,"column":8,"nodeType":"41","messageId":"42","endLine":2,"endColumn":16},{"ruleId":"39","severity":1,"message":"44","line":4,"column":5,"nodeType":"41","messageId":"42","endLine":4,"endColumn":9},{"ruleId":"39","severity":1,"message":"45","line":5,"column":5,"nodeType":"41","messageId":"42","endLine":5,"endColumn":13},{"ruleId":"39","severity":1,"message":"46","line":6,"column":5,"nodeType":"41","messageId":"42","endLine":6,"endColumn":17},{"ruleId":"39","severity":1,"message":"47","line":7,"column":5,"nodeType":"41","messageId":"42","endLine":7,"endColumn":17},{"ruleId":"39","severity":1,"message":"48","line":8,"column":5,"nodeType":"41","messageId":"42","endLine":8,"endColumn":15},{"ruleId":"39","severity":1,"message":"49","line":11,"column":8,"nodeType":"41","messageId":"42","endLine":11,"endColumn":15},{"ruleId":"39","severity":1,"message":"50","line":12,"column":10,"nodeType":"41","messageId":"42","endLine":12,"endColumn":25},{"ruleId":"39","severity":1,"message":"51","line":12,"column":27,"nodeType":"41","messageId":"42","endLine":12,"endColumn":36},{"ruleId":"39","severity":1,"message":"52","line":12,"column":38,"nodeType":"41","messageId":"42","endLine":12,"endColumn":47},{"ruleId":"39","severity":1,"message":"53","line":13,"column":8,"nodeType":"41","messageId":"42","endLine":13,"endColumn":17},{"ruleId":"39","severity":1,"message":"54","line":14,"column":8,"nodeType":"41","messageId":"42","endLine":14,"endColumn":16},{"ruleId":"55","severity":1,"message":"56","line":19,"column":5,"nodeType":"57","messageId":"58","endLine":22,"endColumn":6},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ListItemIcon' is defined but never used.","'IconButton' is defined but never used.","'RootRef' is defined but never used.","'DragDropContext' is defined but never used.","'Droppable' is defined but never used.","'Draggable' is defined but never used.","'InboxIcon' is defined but never used.","'EditIcon' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor"]